/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.kashiki.view.panels;

import com.kashiki.components.table.ActionEditor;
import com.kashiki.components.table.ActionRenderer;
import com.kashiki.controller.ServicoFilme;
import com.kashiki.model.Filme;
import com.kashiki.util.NotificacaoPopup;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kashiki
 */
public class FilmePanel extends javax.swing.JPanel implements PropertyChangeListener {

    private final NotificacaoPopup popup;
    private final ServicoFilme servicoFilme;
    private final DefaultTableModel tableModel;
    private final ActionEditor actionEditor;
    private final SimpleDateFormat sdf;
    private final DateTimeFormatter formatter;
    private final DefaultListModel<String> listModelMovies;

    /**
     * Creates new form Filme
     *
     * @param servicoFilme
     */
    public FilmePanel(ServicoFilme servicoFilme) {
        this.actionEditor = new ActionEditor();
        this.actionEditor.addPropertyChangeListener(this);

        this.sdf = new SimpleDateFormat("dd/MM/y");
        this.formatter = DateTimeFormatter.ofPattern("dd/MM/y");
        this.listModelMovies = new DefaultListModel<>();

        this.initComponents();

        this.tableModel = (DefaultTableModel) this.tableFilmes.getModel();

        this.servicoFilme = servicoFilme;
        this.servicoFilme.addPropertyChangeListener(this);

        this.popup = new NotificacaoPopup();

        this.onLoadTable();
        this.initStatus();
        this.onCalcAverageAges();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPanel = new javax.swing.JTabbedPane();
        panelList = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtSearchBoxMovieName = new javax.swing.JTextField();
        btnSearchMovie = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableFilmes = new javax.swing.JTable();
        txtIdadeLancamento = new javax.swing.JLabel();
        panelData = new javax.swing.JPanel();
        txtNomeFilme = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbPublicoAlvo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescricaoFilme = new javax.swing.JTextArea();
        btnSalvarFilme = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnUpdateMovie = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtIdFilme = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();
        txtDataLancamento = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtPublicoMStatus = new javax.swing.JLabel();
        txtPublicoFStatus = new javax.swing.JLabel();
        txtTotalMoviesStatus = new javax.swing.JLabel();
        txtMediaIdadeStatus = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listFilmesAniverario = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        txtDateAniversario = new com.toedter.calendar.JDateChooser();

        setBackground(new java.awt.Color(45, 45, 45));
        setPreferredSize(new java.awt.Dimension(1010, 490));

        tabPanel.setBackground(new java.awt.Color(45, 45, 45));
        tabPanel.setForeground(new java.awt.Color(255, 255, 255));

        panelList.setBackground(new java.awt.Color(45, 45, 45));

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nome do filme:");

        txtSearchBoxMovieName.setBackground(new java.awt.Color(60, 60, 60));
        txtSearchBoxMovieName.setForeground(new java.awt.Color(255, 255, 255));
        txtSearchBoxMovieName.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 10));
        txtSearchBoxMovieName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchBoxMovieNameActionPerformed(evt);
            }
        });

        btnSearchMovie.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btnSearchMovie.setText("Pesquisar");
        btnSearchMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchBoxMovieNameActionPerformed(evt);
            }
        });

        tableFilmes.setBackground(new java.awt.Color(248, 249, 250));
        tableFilmes.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        tableFilmes.setForeground(new java.awt.Color(0, 0, 0));
        tableFilmes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Público Alvo", "Data de lançamento", "Descrição", "Ações"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableFilmes.setRowHeight(40);

        tableFilmes.getTableHeader().setBackground(new Color(248, 249, 250));
        jScrollPane1.setViewportView(tableFilmes);
        tableFilmes.getColumnModel().getColumn(5).setCellRenderer(new ActionRenderer());
        tableFilmes.getColumnModel().getColumn(5).setCellEditor(actionEditor);

        tableFilmes.getColumnModel().getColumn(0).setPreferredWidth(1);
        tableFilmes.getColumnModel().getColumn(5).setPreferredWidth(50);

        tableFilmes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        tableFilmes.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = tableFilmes.getSelectedRow();
                if (selectedRow != -1) {
                    onRowSelected(selectedRow);
                }
            }
        });

        txtIdadeLancamento.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        txtIdadeLancamento.setForeground(new java.awt.Color(255, 255, 255));
        txtIdadeLancamento.setText("Idade desde o lançamento: 0");

        javax.swing.GroupLayout panelListLayout = new javax.swing.GroupLayout(panelList);
        panelList.setLayout(panelListLayout);
        panelListLayout.setHorizontalGroup(
            panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelListLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIdadeLancamento, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelListLayout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtSearchBoxMovieName)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSearchMovie))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 966, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        panelListLayout.setVerticalGroup(
            panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelListLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearchBoxMovieName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtIdadeLancamento)
                .addGap(11, 11, 11))
        );

        tabPanel.addTab("Lista de Filmes", panelList);

        panelData.setBackground(new java.awt.Color(45, 45, 45));

        txtNomeFilme.setBackground(new java.awt.Color(60, 60, 60));
        txtNomeFilme.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        txtNomeFilme.setForeground(new java.awt.Color(255, 255, 255));
        txtNomeFilme.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 10));

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Id:");

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Público alvo:");

        cmbPublicoAlvo.setBackground(new java.awt.Color(60, 60, 60));
        cmbPublicoAlvo.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        cmbPublicoAlvo.setForeground(new java.awt.Color(255, 255, 255));
        cmbPublicoAlvo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Homens", "Mulheres" }));

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Descrição do filme:");

        txtDescricaoFilme.setBackground(new java.awt.Color(60, 60, 60));
        txtDescricaoFilme.setColumns(20);
        txtDescricaoFilme.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        txtDescricaoFilme.setForeground(new java.awt.Color(255, 255, 255));
        txtDescricaoFilme.setRows(5);
        txtDescricaoFilme.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jScrollPane2.setViewportView(txtDescricaoFilme);

        btnSalvarFilme.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnSalvarFilme.setText("Salvar");
        btnSalvarFilme.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSalvarFilme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarFilmeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Data de lançamento:");

        btnUpdateMovie.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnUpdateMovie.setText("Atualizar");
        btnUpdateMovie.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Nome do filme:");

        txtIdFilme.setBackground(new java.awt.Color(60, 60, 60));
        txtIdFilme.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        txtIdFilme.setForeground(new java.awt.Color(255, 255, 255));
        txtIdFilme.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 10));
        txtIdFilme.setCaretColor(new java.awt.Color(60, 60, 60));
        txtIdFilme.setDisabledTextColor(new java.awt.Color(60, 60, 60));
        txtIdFilme.setEnabled(false);

        btnReset.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnReset.setText("Restaurar");
        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        txtDataLancamento.setBackground(new java.awt.Color(60, 60, 60));
        txtDataLancamento.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N

        javax.swing.GroupLayout panelDataLayout = new javax.swing.GroupLayout(panelData);
        panelData.setLayout(panelDataLayout);
        panelDataLayout.setHorizontalGroup(
            panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDataLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDataLayout.createSequentialGroup()
                        .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelDataLayout.createSequentialGroup()
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSalvarFilme, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3)
                                .addComponent(jScrollPane2)
                                .addGroup(panelDataLayout.createSequentialGroup()
                                    .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtNomeFilme, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6))
                                    .addGap(36, 36, 36)
                                    .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cmbPublicoAlvo, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jLabel5)
                                .addComponent(txtDataLancamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(panelDataLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdFilme, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        panelDataLayout.setVerticalGroup(
            panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDataLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdFilme, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomeFilme, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbPublicoAlvo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDataLancamento, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSalvarFilme, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
        );

        txtDataLancamento.setDate(new Date());

        tabPanel.addTab("Cadastro / Edição de Filmes", panelData);

        jPanel1.setBackground(new java.awt.Color(45, 45, 45));

        jPanel2.setBackground(new java.awt.Color(45, 45, 45));

        jLabel7.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Percentagem de filmes cadastrados para o público alvo:");

        txtPublicoMStatus.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        txtPublicoMStatus.setForeground(new java.awt.Color(255, 255, 255));
        txtPublicoMStatus.setText("> Público Masculino: 0%");

        txtPublicoFStatus.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        txtPublicoFStatus.setForeground(new java.awt.Color(255, 255, 255));
        txtPublicoFStatus.setText("> Público Femenino: 0%");

        txtTotalMoviesStatus.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        txtTotalMoviesStatus.setForeground(new java.awt.Color(255, 255, 255));
        txtTotalMoviesStatus.setText("Total de filmes cadastrados: 0");

        txtMediaIdadeStatus.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        txtMediaIdadeStatus.setForeground(new java.awt.Color(255, 255, 255));
        txtMediaIdadeStatus.setText("Média das idades dos filmes: 0");

        listFilmesAniverario.setModel(this.listModelMovies);
        listFilmesAniverario.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(listFilmesAniverario);

        jLabel8.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Procurar aniversariantes:");

        txtDateAniversario.setDateFormatString("dd/MM");
        txtDateAniversario.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtDateAniversarioPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPublicoMStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPublicoFStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTotalMoviesStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMediaIdadeStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 252, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDateAniversario, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDateAniversario, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel8)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtTotalMoviesStatus)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPublicoMStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPublicoFStatus)
                        .addGap(18, 18, 18)
                        .addComponent(txtMediaIdadeStatus)
                        .addContainerGap())))
        );

        txtDateAniversario.setDate(new Date());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        tabPanel.addTab("Status", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPanel, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPanel, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchBoxMovieNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchBoxMovieNameActionPerformed
        String name = this.txtSearchBoxMovieName.getText();

        if (name.isEmpty()) {
            this.onLoadTable();
            return;
        }

        List<Filme> filmes = this.servicoFilme.Consultar(name);

        if (filmes.isEmpty()) {
            popup.showMessage("Erro", "Filme não encontrado!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        tableModel.setRowCount(0);

        filmes.forEach(filme -> tableModel.addRow(filme.toRowTable()));
    }//GEN-LAST:event_txtSearchBoxMovieNameActionPerformed

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        String idText = txtIdFilme.getText().trim();

        if (idText.isBlank()) {
            popup.showMessage("Erro", "Id inválido", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int id = Integer.parseInt(idText);
        String nomeFilme = this.txtNomeFilme.getText().trim();
        String descricaoFilme = this.txtDescricaoFilme.getText();
        String publicoAlvoFIlme = this.cmbPublicoAlvo.getSelectedItem().toString();
        String datalancamentoFilme = this.sdf.format(this.txtDataLancamento.getDate());

        Boolean isSuccess = this.servicoFilme.Atualizar(id, nomeFilme, descricaoFilme, publicoAlvoFIlme, datalancamentoFilme);

        if (isSuccess) {
            popup.showMessage("Sucesso", "Filme atualizado com sucesso!", JOptionPane.INFORMATION_MESSAGE);

            this.onLoadTable();
        } else {
            popup.showMessage("Erro", "Filme não atualizado!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    private void btnSalvarFilmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarFilmeActionPerformed
        String nomeFilme = this.txtNomeFilme.getText().trim();
        String descricaoFilme = this.txtDescricaoFilme.getText();
        String publicoAlvoFIlme = this.cmbPublicoAlvo.getSelectedItem().toString();
        String datalancamentoFilme = this.sdf.format(this.txtDataLancamento.getDate());

        Boolean isSuccess = this.servicoFilme.Cadastrar(nomeFilme, descricaoFilme, publicoAlvoFIlme, datalancamentoFilme);

        if (isSuccess) {
            this.popup.showMessage("Sucesso", "Filme cadastrado com sucesso!", JOptionPane.INFORMATION_MESSAGE);

            this.btnResetActionPerformed(null);

            this.onLoadTable();
        } else {
            this.popup.showMessage("Erro", "Filme não cadastrado!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSalvarFilmeActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        this.txtIdFilme.setText("");
        this.txtNomeFilme.setText("");
        this.txtDescricaoFilme.setText("");
        this.cmbPublicoAlvo.setSelectedIndex(0);
        this.txtDataLancamento.setDate(new Date());
    }//GEN-LAST:event_btnResetActionPerformed

    private void txtDateAniversarioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtDateAniversarioPropertyChange
        Object obj = evt.getNewValue();

        if (obj instanceof Date && this.servicoFilme != null) {
            this.listModelMovies.clear();
            String date = new SimpleDateFormat("dd/MM").format(obj);

            this.servicoFilme.Listar().stream().filter(filme -> {
                return filme.getDataLancamento().startsWith(date);
            }).forEach(filme -> {
                LocalDate dataLancamentoFilme = LocalDate.parse(filme.getDataLancamento(), this.formatter);

                Period period = Period.between(dataLancamentoFilme, LocalDate.now());

                int year = period.getYears();

                var yearFormatted = (year > 1) ? (year + " anos") : (year == 0) ? year : (year + " ano");

                String element = filme.getNome() + " (" + filme.getDataLancamento() + ") » " + yearFormatted;

                this.listModelMovies.addElement(element);
            });

        }

    }//GEN-LAST:event_txtDateAniversarioPropertyChange

    private void onLoadTable() {
        this.tableModel.setRowCount(0);

        this.servicoFilme.Listar().forEach(filme -> tableModel.addRow(filme.toRowTable()));
    }

    private void onLoadDataForEdit() {
        try {
            int indexSelected = this.tableFilmes.getSelectedRow();

            String nome = (String) this.tableModel.getValueAt(indexSelected, 1);
            String descricao = (String) this.tableModel.getValueAt(indexSelected, 4);
            String publicoAlvoFIlme = (String) this.tableModel.getValueAt(indexSelected, 2);
            String dataLancamentoFilme = (String) this.tableModel.getValueAt(indexSelected, 3);
            int id = Integer.parseInt(this.tableModel.getValueAt(indexSelected, 0).toString());

            this.txtNomeFilme.setText(nome);
            this.txtIdFilme.setText(id + "");
            this.txtDescricaoFilme.setText(descricao);
            this.cmbPublicoAlvo.setSelectedItem(publicoAlvoFIlme);
            this.txtDataLancamento.setDate(sdf.parse(dataLancamentoFilme));
        } catch (ParseException ex) {
            Logger.getLogger(FilmePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void onDeleteMovie() {
        int indexSelected = this.tableFilmes.getSelectedRow();

        int id = (int) this.tableModel.getValueAt(indexSelected, 0);

        Boolean isSuccess = this.servicoFilme.Remover(id);

        if (isSuccess) {
            this.onLoadTable();

            this.popup.showMessage("Sucesso", "Filme removido com sucesso!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.popup.showMessage("Erro", "Filme não removido!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void initStatus() {
        List<Filme> movies = this.servicoFilme.Listar();

        int totalMovies = movies.size();

        if (totalMovies < 1) {
            return;
        }

        this.txtTotalMoviesStatus.setText("Total de filmes cadastrados: " + totalMovies);

        long totalMoviesHomens = movies.stream().filter(prdct -> prdct.getPublicoAlvo().equals("Homens")).count();
        long totalMoviesMulheres = movies.stream().filter(prdct -> prdct.getPublicoAlvo().equals("Mulheres")).count();

        float percMoviesHomens = (totalMoviesHomens * 100 / totalMovies);
        float percMoviesMulheres = totalMoviesMulheres * 100 / totalMovies;

        this.txtPublicoMStatus.setText("> Público Masculino: " + percMoviesHomens + "%");
        this.txtPublicoFStatus.setText("> Público Femenino: " + percMoviesMulheres + "%");
    }

    private void onRowSelected(int selectedRow) {
        String dataLancamentoFilmeText = (String) this.tableModel.getValueAt(selectedRow, 3);

        LocalDate dataLancamentoFilme = LocalDate.parse(dataLancamentoFilmeText, this.formatter);

        Period period = Period.between(dataLancamentoFilme, LocalDate.now());

        int year = period.getYears();

        var yearFormatted = (year > 1) ? (year + " anos") : (year == 0) ? year : (year + " ano");

        this.txtIdadeLancamento.setText("Idade desde o lançamento: " + yearFormatted);
    }

    private void onCalcAverageAges() {
        List<Filme> movies = this.servicoFilme.Listar();

        int totalMovies = movies.size();

        if (totalMovies < 1) {
            return;
        }

        int sumAges = movies.stream().mapToInt(tif -> {
            String dataLancamentoFilmeText = tif.getDataLancamento();

            LocalDate dataLancamentoFilme = LocalDate.parse(dataLancamentoFilmeText, this.formatter);

            Period period = Period.between(dataLancamentoFilme, LocalDate.now());

            int year = period.getYears();

            return year;
        }).sum();

        float average = sumAges / totalMovies;

        this.txtMediaIdadeStatus.setText("Média das idades dos filmes: " + average);
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        if (null != pce.getPropertyName()) {
            switch (pce.getPropertyName()) {
                case "edit" -> {
                    SwingUtilities.invokeLater(this::onLoadDataForEdit);
                    this.tabPanel.setSelectedIndex(1);
                }
                case "delete" -> {
                    SwingUtilities.invokeLater(this::onDeleteMovie);
                    SwingUtilities.invokeLater(this::initStatus);
                    SwingUtilities.invokeLater(this::onCalcAverageAges);
                }
                case "filmes" -> {
                    SwingUtilities.invokeLater(this::initStatus);
                    SwingUtilities.invokeLater(this::onCalcAverageAges);
                }
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSalvarFilme;
    private javax.swing.JButton btnSearchMovie;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JComboBox<String> cmbPublicoAlvo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listFilmesAniverario;
    private javax.swing.JPanel panelData;
    private javax.swing.JPanel panelList;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JTable tableFilmes;
    private com.toedter.calendar.JDateChooser txtDataLancamento;
    private com.toedter.calendar.JDateChooser txtDateAniversario;
    private javax.swing.JTextArea txtDescricaoFilme;
    private javax.swing.JTextField txtIdFilme;
    private javax.swing.JLabel txtIdadeLancamento;
    private javax.swing.JLabel txtMediaIdadeStatus;
    private javax.swing.JTextField txtNomeFilme;
    private javax.swing.JLabel txtPublicoFStatus;
    private javax.swing.JLabel txtPublicoMStatus;
    private javax.swing.JTextField txtSearchBoxMovieName;
    private javax.swing.JLabel txtTotalMoviesStatus;
    // End of variables declaration//GEN-END:variables

}
